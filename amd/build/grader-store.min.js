define(["local_customgrader/grader-utils","local_customgrader/grader-enums","local_customgrader/grader-service","local_customgrader/vendor-vue","local_customgrader/vendor-lodash"],function(e,t,a,d,r){var s={ADD_GRADE:"addGrade",DELETE_CATEGORY:"deleteCategory",ADD_ITEM:"addItem",ADD_CATEGORY:"addCategory",ADD_GRADE_TO_STUDENT:"addGradeToStudent",SET_STATE:"setAllState",SET_GRADE:"setGrade",SET_GRADES:"setGrades",SET_CATEGORY:"setCategory",SET_STUDENT_SORT_METHOD:"setStudentSortMethod",SET_SELECTED_CATEGORY_ID:"setSelectedCategoryId",SET_LEVELS:"setLevels",SET_ITEM:"setItem",DELETE_ITEM:"deleteItem",DELETE_GRADE:"deleteItemGrades"},l={FETCH_STATE:"fetchAllState",FILL_GRADES:"fillGrades",FILL_GRADES_FOR_NEW_ITEM:"fillGradesForNewItem",UPDATE_GRADE:"updateGrade",DELETE_ITEM:"deleteItem",DELETE_CATEGORY_CHILDS:"deleteCategoryChilds",UPDATE_CATEGORY:"setCategory",ADD_ITEM:"addItem",ADD_PARTIAL_EXAM:"addPartialExam",DELETE_CATEGORY:"deleteCategory",ADD_CATEGORY:"addCategory",UPDATE_ITEM:"setItem",DELETE_ITEM_GRADES:"deleteItemGrades"};return{store:{state:{decimalPlaces:2,additionalColumnsAtFirst:[{text:"CÃ³digo estudiante"},{text:"",hide:!0}],additionalColumnsAtEnd:[{text:"Nota final"}],sortStudentsMethodType:{name:t.sortStudentMethods.LAST_NAME,order:t.sortDirection.ASC},students:{},selectedCategoryId:null,items:{},categories:[],grades:{},levels:[],course:{fullname:"Nombre completo de el curso"},maxDisplayGrade:5,gradeDisplayRange:.5},mutations:{[s.DELETE_ITEM](e,t){d.delete(e.items,t)},[s.DELETE_CATEGORY](e,t){const a=e.categories.map(e=>e.id).indexOf(t);d.delete(e.categories,a)},[s.SET_STUDENT_SORT_METHOD](e,t){e.sortStudentsMethodType=t},[s.DELETE_GRADE](e,t){Object.keys(e.students).forEach(a=>{const r=e.students[a];d.set(e.students[a],"gradeIds",r.gradeIds.filter(e=>e!==t))}),d.delete(e.grades,t)},[s.ADD_ITEM](e,t){d.set(e.items,t.id,t)},[s.ADD_CATEGORY](e,t){e.categories.push(t)},[s.ADD_GRADE](t,a){a.id=e.ID();let r=t.students[a.userid],s=r.gradeIds?r.gradeIds:[];d.set(t.grades,a.id,a),d.set(t.students[r.id],"gradeIds",[...s,a.id])},[s.ADD_GRADE_TO_STUDENT](e,t){let a=t.grade,r=t.studentId,s=e.students[r],i=s.gradeIds?s.gradeIds:[];d.set(e.students[r],"gradeIds",[...i,a.id])},[s.SET_ITEM](e,t){d.set(e.items,t.id,t)},[s.SET_LEVELS](e,t){e.levels=t},[s.SET_CATEGORY](e,t){let a=e.categories.map(e=>e.id).indexOf(t.id);d.set(e.categories,a,t)},[s.SET_GRADES](t,a){a.forEach(a=>{const r=Object.values(t.grades).find(e=>e.itemid===a.itemid&&e.userid===a.userid);if(a.finalgrade=e.removeInsignificantTrailZeros(a.finalgrade),r.finalgrade!=a.finalgrade){if(console.log("nel prro"),!t.grades[a.id]){t.grades[a.id]=a;const e=[...t.students[r.userid].gradeIds.filter(e=>e!==r.id),a.id];t.students[a.userid]={...t.students[a.userid],gradeIds:e},d.delete(t.grades,r.id)}d.set(t.grades,a.id,a)}})},[s.SET_GRADE](t,a){let r=a.old,s=a.new;if(s.finalgrade=e.removeInsignificantTrailZeros(s.finalgrade),t.grades[s.id]=s,r&&r.id!==s.id){const e=[...t.students[r.userid].gradeIds.filter(e=>e!==r.id),s.id];t.students[r.userid]={...t.students[r.userid],gradeIds:e},d.delete(t.grades,r.id)}},[s.SET_SELECTED_CATEGORY_ID](e,t){e.selectedCategoryId=t},[s.SET_STATE](t,a){t.levels=a.levels;let d={};a.students.forEach(e=>{d[e.id]=e}),t.students=d;let r={};a.items.forEach(e=>{r[e.id]=e}),t.items=r,t.categories=a.categories;let s={};a.grades.forEach(t=>{s[t.id]={...t,finalgrade:e.removeInsignificantTrailZeros(t.finalgrade)}}),t.grades=s,t.course=a.course}},actions:{[l.DELETE_ITEM]({commit:e,dispatch:t,state:d},r){a.delete_item(r).then(a=>{e(s.SET_LEVELS,a.levels),e(s.DELETE_ITEM,r),t(l.DELETE_ITEM_GRADES,r)})},[l.ADD_ITEM]({commit:e,dispatch:t},d){a.add_item(d).then(a=>{e(s.ADD_ITEM,a.item),e(s.SET_LEVELS,a.levels),t(l.FILL_GRADES_FOR_NEW_ITEM,a.item)})},[l.DELETE_ITEM_GRADES]({commit:e,state:t},a){let d=Object.keys(t.grades),r=[];d.forEach(e=>{t.grades[e].itemid===a&&r.push(e)}),r.forEach(t=>{e(s.DELETE_GRADE,t)})},[l.ADD_PARTIAL_EXAM]({commit:e,getters:t},d){a.add_partial_exam(d).then(t=>{e(s.SET_LEVELS,t.levels),e(s.ADD_CATEGORY,t.category),e(s.ADD_ITEM,t.partial_item),e(s.ADD_ITEM,t.optional_item)})},[l.DELETE_CATEGORY_CHILDS]({commit:e,getters:t,dispatch:a},d){const r=t.categoryChildItems(d),i=t.categoryChildCategories(d);r.forEach(t=>{e(s.DELETE_ITEM,t.id),a(l.DELETE_ITEM_GRADES,t.id)}),i.forEach(t=>{e(s.DELETE_CATEGORY,t.id)})},[l.DELETE_CATEGORY]({commit:e,getters:t,dispatch:d},r){a.delete_category(r).then(t=>{e(s.SET_LEVELS,t.levels),d(l.DELETE_CATEGORY_CHILDS,r),e(s.DELETE_CATEGORY,r)})},[l.FILL_GRADES_FOR_NEW_ITEM]({commit:e,state:t,getters:a},d){Object.keys(t.students).forEach(t=>{let a={userid:t,itemid:d.id,finalgrade:null,rawgrademin:d.grademin,rawgrademax:d.grademax};e(s.ADD_GRADE,a)})},[l.FILL_GRADES]({commit:e,state:t,getters:a}){let d=Object.keys(t.students),r=Object.values(t.grades);d.forEach(d=>{for(var i of a.itemOrderIds){let a=t.items[i],l=r.find(e=>e.userid===d&&e.itemid===a.id);if(l)e(s.ADD_GRADE_TO_STUDENT,{studentId:d,grade:l});else{let t={userid:d,itemid:a.id,finalgrade:null,rawgrademin:a.grademin,rawgrademax:a.grademax};e(s.ADD_GRADE,t)}}})},[l.UPDATE_GRADE]({commit:e,state:t},d){a.update_grade(d,t.course.id).then(t=>{console.log(t),e(s.SET_GRADES,t.other_grades)})},[l.UPDATE_CATEGORY]({dispatch:e,commit:t},d){a.update_category(d).then(e=>{let a=e.category,d=e.levels;t(s.SET_CATEGORY,a),t(s.SET_LEVELS,d)})},[l.ADD_CATEGORY]({commit:e,state:t,dispatch:d},r){a.add_category(r.category,r.weight).then(t=>{let a=t.category,r=t.category_item,i=t.levels;e(s.ADD_ITEM,r),e(s.ADD_CATEGORY,a),e(s.SET_LEVELS,i),d(l.FILL_GRADES_FOR_NEW_ITEM,r)})},[l.UPDATE_ITEM]({dispatch:e,commit:t},d){a.update_item(d).then(e=>{let a=e.item,d=e.levels;t(s.SET_ITEM,a),t(s.SET_LEVELS,d),t(s.SET_GRADES,e.other_grades)})},[l.FETCH_STATE]({dispatch:t,commit:d}){a.get_grader_data(e.getCourseId()).then(e=>{d(s.SET_STATE,e),t(l.FILL_GRADES)})}},getters:{courseLevel:e=>e.levels[0]?e.levels[0][0]:[],selectedCategory:(e,t)=>t.categoryById(e.selectedCategoryId),itemLevel:e=>e.levels[e.levels.length-1],categoryLevels:e=>{let t=e.levels.slice(1,e.levels.length-1);return t||[]},itemsCount:e=>Object.keys(e.items).length,categoryById:e=>t=>e.categories.find(e=>e.id===t),studentById:e=>t=>e.students[t],studentSetSorted:(e,a)=>(function(e,a){switch(a.name){case t.sortStudentMethods.FIRST_NAME:return r.orderBy(e,["firstname"],a.order);case t.sortStudentMethods.LAST_NAME:return r.orderBy(e,["lastname"],a.order)}})(a.studentSet,e.sortStudentsMethodType),studentSet:e=>Object.values(e.students),studentsCount:e=>Object.keys(e.students).length,studentsAsesCount:(e,t)=>t.studentSet.filter(e=>e.is_ases).length,itemSet:e=>Object.values(e.items),itemOrderIds:(e,t)=>{let a=t.itemLevel;return a?a.map(e=>e.object.id):Object.keys(e.items)},itemOrderedNames:(e,t)=>{let a=t.itemLevel;return a?a.map(e=>null===e.object.itemname||""===e.object.itemname?"Total "+t.categoryById(e.object.iteminstance).fullname:e.object.itemname):Object.keys(e.items)},finalGradeId:(e,t)=>t.itemOrderIds[t.itemOrderIds.length-1],categoryChildItems:(e,t)=>e=>{let a=t.itemSet.filter(t=>t.categoryid===e||t.iteminstance===e);return Array.isArray(a)?a:[]},categoryChildCategories:e=>t=>{let a=e.categories.filter(e=>e.parent===t);return a||[]},categoryChildSize:(e,t)=>e=>{let a=t.categoryChildItems(e),d=t.categoryChildCategories(e);return a.length+d.length},categoryDepth:e=>{if(e.categories.length<=0)return 0;var t=e.categories.map(e=>e.depth);return Math.max.apply(Math,t)},getCategoriesByDepth:e=>t=>e.categories.find(e=>e.depth===t),gradesSet:e=>Object.values(e.grades),gradesByItemId:(e,t)=>e=>t.gradesSet.filter(t=>t.itemid===e),passingGrades:(e,t)=>t.gradesSet.filter(e=>e.finalgrade>=.6*e.rawgrademax),passingGradesSet:(e,t)=>t.itemOrderIds.map(e=>t.gradesByItemId(e).filter(e=>e.finalgrade>=.6*e.rawgrademax).length),failingGrades:(e,t)=>t.gradesSet.filter(e=>e.finalgrade<.6*e.rawgrademax&&null!=e.finalgrade),failingGradesSet:(e,t)=>t.itemOrderIds.map(e=>t.gradesByItemId(e).filter(e=>e.finalgrade<.6*e.rawgrademax&&null!=e.finalgrade).length),nullGrades:(e,t)=>t.gradesSet.filter(e=>null===e.finalgrade||void 0===e.finalgrade),nullGradesSet:(e,t)=>t.itemOrderIds.map(e=>t.gradesByItemId(e).filter(e=>null===e.finalgrade||void 0===e.finalgrade).length),passingGradesCount:(e,t)=>t.passingGrades.length,failingGradesCount:(e,t)=>t.failingGrades.length,nullGradesCount:(e,t)=>t.nullGrades.length,finalGradesSet:(e,t)=>t.gradesSet.filter(e=>e.itemid===t.finalGradeId),finalPassingGradeSet:(e,t)=>t.finalGradesSet.filter(e=>e.finalgrade>=.6*e.rawgrademax),lineGraphLabel:e=>{let t=[],a=e.maxDisplayGrade/e.gradeDisplayRange,d=0,r="";for(i=0;i<a-1;i++)r=d+" - ",r+=(d+=e.gradeDisplayRange)-.1,t.push(r);return r=d+" - "+e.maxDisplayGrade,t.push(r),t},getGradesByRange:(e,t)=>{let a=0,d=e.gradeDisplayRange,r=[],s=e.maxDisplayGrade/e.gradeDisplayRange,l=t.finalGradesSet.map(t=>t.finalgrade/t.rawgrademax*e.maxDisplayGrade);for(i=0;i<s-1;i++)r.push(l.filter(e=>e>=a&&e<d).length),a+=e.gradeDisplayRange,d+=e.gradeDisplayRange;return r.push(l.filter(e=>e>=a).length),r}}},mutations:s,actions:l}});