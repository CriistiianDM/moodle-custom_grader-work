// @flow
/*::
type Item = {
  id: number,
  itemname: number,
  itemtype: boolean,
  grademin: number,
  grademax: number,
  categoryid: string,
  aggregationcoef: number,
  itemtype: <manual|mod|category|course>,
  iteminstance: number // In the case than itemtype is category, iteminstace have the category parent id
};
*/
/*::
type AgregationEnum = {
    SIMPLE: 0,
    PONDERADO:10
}
 */
/*::
type Category = {
  id: number,
  fullname: string,
  depth: number,
  parent: number,
  grade_item: number, //id of the item asociated to this category
  aggregation: AgregationEnum
};
*/
/*::
type Column = {
    text: string
}
 */


/*::
type Student = {
  id: number,
  fistname: string,
  username: string, // moodle user name, in other words, student code
  lastname: string,
  gradeIds: array
};
*/
/*::
type Agregation = {
  id: number,
  name: string
};
*/
/*::
type EditItemResponse = {
    category: Category,
    levels: Array
}
*/

/*::
type Grade = {
  id: number,
  userid: number,
  itemid: number,
  rawgrademin: number,
  rawgrademax: number,
  finalgrade: string,
};
*/
// Generate unique IDs for use as pseudo-private/protected names.
// Similar in concept to
// <http://wiki.ecmascript.org/doku.php?id=strawman:names>.
//
// The goals of this function are twofold:
//
// * Provide a way to generate a string guaranteed to be unique when compared
//   to other strings generated by this function.
// * Make the string complex enough that it is highly unlikely to be
//   accidentally duplicated by hand (this is key if you're using `ID`
//   as a private/protected name on an object).
//
// Use:
//
//     var privateName = ID();
//     var o = { 'public': 'foo' };
//     o[privateName] = 'bar';

define([
    'local_customgrader/vendor-vue',
    'local_customgrader/vendor-vue-router',
    'local_customgrader/vendor-vuex',
    'local_customgrader/vendor-vue-resource',
    'local_customgrader/vendor-vue-js-modal',
    'local_customgrader/vendor-vue-flex',
    'local_customgrader/vendor-vue-toasted',
    'local_customgrader/vendor-loading-indicator',
    'local_customgrader/vendor-lodash',
    'local_customgrader/grader-store',
    'local_customgrader/grader-enums',
    'local_customgrader/grader-utils',
    'local_customgrader/grader-component-main',
    'local_customgrader/grader-router',
    'local_customgrader/grader-filters',
    ], function (
        Vue,
        VueRouter,
        Vuex,
        VueResource,
        VModal,
        VueFlex,
        VueToasted,
        loading_indicator,
        _,
        g_store,
        g_enums,
        g_utils,
        g_c_main,
        g_router,
        g_filters){
    Vue.use(VueRouter);
    Vue.use(Vuex);
    Vue.use(VueResource);
    Vue.use(VModal.default, { dialog: true });
    Vue.use(VueFlex);
    Vue.use(VueToasted.default, {iconPack: 'custom-class'});
    var graderVueEvents = {
        UPDATE_CATEGORY_OK: 'updateCategoryOK',
        ADD_ELEMENT_OK: 'addElementOK'
    };

    var modalsEnum = {
        EDIT_CATEGORY : 'edit-category',
        EDIT_ITEM : 'edit-item',
        ADD_ELEMENT: 'add-element'
    };

    const categoryElement = { name: 'CATEGORÍA', id: 0 };
    const itemElement = { name: 'ÍTEM', id: 1 };
    const partialElement = { name: 'PARCIAL', id: 2 };
    const elementTypes = [categoryElement, itemElement, partialElement];

    var store = new Vuex.Store(g_store.store);

    var EditCategoryForm = Vue.component('EditCategoryForm', {
            // language=HTML
            template: `                
                    <form>
                        <h3>Editando Categoría: {{category.fullname}}</h3>
                            <label for="categoryFullName">
                                Nombre de la categoria
                            </label>
                            <input id="categoryFullName" v-model="categoryFullName">
                            <label for="aggregation">
                            Tipo de calificación
                            </label>
                            <select v-model="aggregation" id="aggregation">
                                <option 
                                        v-for="aggregation in aggregations"
                                        v-bind:value="aggregation.id">{{aggregation.name}}</option>
                            </select>
                            <button type="button" v-on:click="updateCategory">Guardar</button>
                    </form>
            `
        ,
        data: function() {
                return {
                    categoryFullName: '',
                    gradeTypeId: 0,
                    aggregation: g_enums.aggregations.PROMEDIO
                }
        },
        computed: {
            ...Vuex.mapState(['aggregations', 'selectedCategoryId']),
            ...Vuex.mapGetters({
                category: 'selectedCategory'
            }),
        },
        mounted: function () {
          this.categoryFullName = this.category.fullname;
          this.aggregation = this.category.aggregation;
        },
        methods: {
                updateCategory() {
                    this.$store.dispatch(
                        g_store.actions.UPDATE_CATEGORY,
                        {
                            ...this.category,
                                fullname: this.categoryFullName,
                                aggregation: this.aggregation,
                                aggregationcoef: 50

                        })
                        .then(()=> {
                            this.$emit(graderVueEvents.UPDATE_CATEGORY_OK);
                        })
                        .catch( ()=> {
                            this.$toasted.show('Ha habido un error guardando la categoria', {duration: 3000, theme:'bubble'});
                        });
                }
        }
        }
        );
    var CloseModalButton = Vue.component('CloseModalButton', {
        template: `
        <i class="fa fa-2x fa-times-circle" v-bind:style="closeButtonStyle"  @click="$modal.hide(modalName)"></i>
        `,
        props: {
            modalName: {
                type: String,
                required: true
            }
        },
        data: function() {
            return {
                closeButtonStyle: {
                    position: "absolute",
                    top: "10px",
                    right: "10px"
                }
            }
        }
    });
        var ModalAddElement = Vue.component('ModalAddElement', {
            template: `
       <modal 
        v-bind:name="modalName"
        v-bind:transition="'nice-modal-fade'"
        :draggable="true"
        >
            <AddElementForm v-on:addElementOK="$modal.hide(modalName)"></AddElementForm>
            <CloseModalButton v-bind:modalName="modalName"></CloseModalButton>
       </modal>
       `,
        data: function() {
                return {
                    modalName: modalsEnum.ADD_ELEMENT
                }
        }
        });
    var ModalEditCategory = Vue.component('ModalEditCategory',{
       template: `<modal
                    v-bind:name="modalName" 
                    v-bind:transition="'nice-modal-fade'"
                    :draggable="true"
                    >
                        <EditCategoryForm   v-on:updateCategoryOK="$modal.hide(modalName)"></EditCategoryForm>
                        <CloseModalButton v-bind:modalName="modalName"></CloseModalButton>
                   </modal>
       `,
        data: function () {
           return {
               modalName: modalsEnum.EDIT_CATEGORY
           }
        }
    });

    var AddElementForm = Vue.component('AddElementForm',{
       template: `
        
       <form>
       <h2>Añadir elemento</h2>
       <label></label>
       <select id="elementType" v-model="elementTypeId">
           <option v-for="elementType in elementTypes" v-bind:value="elementType.id">
            {{elementType.name}}
           </option>
       </select>
       <label for="elementName">
        Nombre de el elemento
        </label>
        <input id="elementName" v-model="elementName">
        <template v-if="parentCategory.aggregation == weigthedMeanOfGrades">
            <label for="elementAggregationCoef">
            Peso 
        </label>
        <input placeholder="Ingrese un valor entre 1 y 100" id="elementAggregationCoef" v-model="elementAggregationCoef" type="number">
        </template>
       <button type="button" v-on:click="createElement()">Añadir</button>
       </form>
       `,
        data : function () {
           return {
               elementTypes: elementTypes,
               elementTypeId: itemElement.id,
               elementName: '',
               elementAggregationCoef: ''
           }
        },
        computed: {
            ...Vuex.mapState(['selectedCategoryId', 'course']),
            ...Vuex.mapGetters(['selectedCategory']),
            parentCategory: function () {
                return this.selectedCategory;
            },
            weigthedMeanOfGrades: function () {
                return g_enums.aggregations.PROMEDIO;
            }
        },
        methods: {
           createElement() {
               if (this.elementTypeId === itemElement.id) {
                   const item = {
                       itemname: this.elementName,
                       aggregationcoef: this.elementAggregationCoef,
                       parent_category: this.parentCategory.id,
                       courseid: this.course.id,
                   };
                   this.$store.dispatch(g_store.actions.ADD_ITEM, item)
                       .then(()=> {
                           this.$emit(graderVueEvents.ADD_ELEMENT_OK);
                           this.$toasted.show(
                               `Se ha añadido el item '${item.itemname}'`,
                               { duration : 3000, icon: 'fa fa-check'});
                       })
                       .catch(() => {
                           this.$toasted.show(
                               'Ha ocurrido un error guardando la nueva categoria.',
                               {duration: 3000, theme: 'bubble'}
                           )
                       })
               }
           }
        }

    });



        var ItemMiniMenuEdit = Vue.component('ItemMiniMenuEdit', {
                template: `
                <div>
                    <i class="fa fa-trash" v-on:click="deleteItem()"></i>
                </div>
            `,
                props: ['itemId'],
                methods: {
                    deleteItem() {
                        loading_indicator.show();
                        this.$store.dispatch(g_store.actions.DELETE_ITEM, this.itemId)
                            .then(()=>loading_indicator.hide());

                    }
                }
            }
        );
    var CategoryMiniMenuEdit = Vue.component('CategoryMiniMenuEdit', {
            template: `
                <div v-bind:style="style">
                    <i class="fa fa-edit" v-on:click="showEditDialog"></i>
                    <i class="fa fa-plus" v-on:click="showAddElementDialog"></i>
                    <i class="fa fa-trash"></i>
                </div>
            `,
        props: ['categoryId'],
        data: function () {
                return {
                    style: {
                        display: "grid",
                        gridTemplateColumns: "repeat(3, max-content)",
                        gridColumnGap: "8px"
                    }
                }
        },
        computed: {
                ...Vuex.mapGetters([
                    'categoryById'
                ]),
            category: function () {
                    return this.categoryById(this.categoryId);
                },
        },
        methods: {
            showEditDialog() {
                this.$store.commit(
                    g_store.mutations.SET_SELECTED_CATEGORY_ID,
                    this.category.id);
                this.$modal.show(modalsEnum.EDIT_CATEGORY);
            },
            showAddElementDialog() {
                this.$store.commit(
                    g_store.mutations.SET_SELECTED_CATEGORY_ID,
                    this.category.id);
                this.$modal.show(modalsEnum.ADD_ELEMENT);
            }
        }
        }
        );
    var ThCategory = Vue.component('ThCategory', {
       template : `    

                    <th 
                    @mouseover="showMenuItems = true"
                    @mouseout="showMenuItems = false" 
                    style="background-color: gray;" 
                    v-bind:colspan="childSize" 
                    class="category">
                        <flex-row align-v="center"  v-bind:style="editZoneStyles">
                           
                            <editable :content="category.fullname" @update="updateCategoryName"></editable>
                            <editable 
                            :sufix="'%'" 
                            @update="saveAggregationCoef($event)"
                            :content="aggregationCoef | round(2)" 
                            v-if="parentCategory.aggregation == weightedAggregation"
                            ></editable>
                            <CategoryMiniMenuEdit v-bind:categoryId="category.id" v-show="showMenuItems"></CategoryMiniMenuEdit>
                        </flex-row>
                    </th>
       `,
        props: ['element'],
        data: function() {
           return {
               categoryName: '',
               editZoneStyles: {
                   display: 'grid',
                   gridTemplateColumns: 'repeat(3, max-content)',
                   gridColumnGap: '5px'
               },
               showMenuItems: false
           }
        },
        computed: {
            ...Vuex.mapGetters([
                'categoryById',
                'categoryChildSize'
            ]),
            ...Vuex.mapState(['items']),
            category: function() {
                return this.categoryById(this.element.object.id);
            },
            childSize: function () {
                return this.categoryChildSize(this.category.id);
            },
            categoryGradeItem: function () {
              return this.items[this.category.grade_item];
            },
            aggregationCoef: function () {
              return this.categoryGradeItem.aggregationcoef;
            },
            parentCategory: function() {
                return this.categoryById(this.category.parent);
            },
            weightedAggregation : function () {
                return g_enums.aggregations.PROMEDIO
            }

        },
        mounted: function (){
          this.categoryName = this.category.fullname;
        },
        methods: {
            updateCategoryName: function (categoryName) {
             this.$store.dispatch(
                 g_store.actions.UPDATE_CATEGORY,
                 {...this.category, fullname: categoryName})
           },
            saveAggregationCoef: function(categoryAggregationCoef) {
                if(categoryAggregationCoef !== this.aggregationCoef) {
                    this.$store.dispatch(g_store.actions.UPDATE_ITEM,
                        {...this.categoryGradeItem, aggregationcoef: categoryAggregationCoef})
                }
            },
           }
    });

    var ItemActionsMini = Vue.component('ItemActionsMini', {
        template:`
        
        `,
        props: ['itemId']
    });
    var ThStudentNames = Vue.component('th-student-names', {
       template: `
       <th id="th-student-names"> 
           <flex-row>
               <a v-on:click="changeOrderToLastame()">Apellidos</a> 
               <span>/ </span>
               <a v-on:click="changeOrderToName">Nombres</a>
           </flex-row> 
       </th>
       `,
        data: function () {
          return {
              lastNameDirectionAsc: true,
              firstNameDirectionAsc: true
          }
        },
        methods: {
           changeOrderToLastame() {

                this.$store.commit(
                    g_store.mutations.SET_STUDENT_SORT_METHOD,
                    {
                        name: g_enums.sortStudentMethods.LAST_NAME,
                        order: this.lastNameDirectionAsc? g_enums.sortDirection.ASC : 'desc'
                    });
                this.lastNameDirectionAsc = !this.lastNameDirectionAsc;
           },
            changeOrderToName() {
                this.$store.commit(
                    g_store.mutations.SET_STUDENT_SORT_METHOD,
                    {
                        name: g_enums.sortStudentMethods.FIRST_NAME,
                        order: this.firstNameDirectionAsc? g_enums.sortDirection.ASC : 'desc'
                    });
                this.firstNameDirectionAsc = !this.firstNameDirectionAsc;
            }
        }

    });
    var TrItems = Vue.component('TrItems', {
        template : `
                    <tr>
                    <th-student-names></th-student-names>
                    <th colspan="1" v-for="additionalColumnAtFirst in additionalColumnsAtFirst" v-show="!additionalColumnAtFirst.hide">{{additionalColumnAtFirst.text}}</th>
                    <template v-for="itemId, index) in orderedItemIds">       
                        <ThItemCategory 
                        v-if="items[itemId].itemtype === 'category'" 
                        v-bind:itemId="items[itemId].id" 
                        v-bind:colspan="1"
                        ></ThItemCategory> 
                        
                        <ThItemManualAndMod 
                        v-if="items[itemId].itemtype === 'manual' || items[itemId].itemtype === 'mod'"  
                        v-bind:itemId="items[itemId].id" 
                        ></ThItemManualAndMod>
                     </template>
                     <th colspan="1" v-for="additionalColumnAtEnd in additionalColumnsAtEnd">{{additionalColumnAtEnd.text}}</th>
                     </tr>
   `,
        computed: {
            ...Vuex.mapGetters({
                orderedItemIds: 'itemOrderIds'
            }),
            ...Vuex.mapState([
                'additionalColumnsAtFirst',
                'additionalColumnsAtEnd',
                'items'
            ])
        },
    });
        Vue.component('editable',{
            template: `<div contenteditable="true" @blur="update">{{content}}<span>{{sufix}}</span></div>`,
            props:['content', 'sufix'],
            methods:{
                getContent: function (event) {
                    return event.target.innerText.replace(this.sufix, '');
                },
                update:function(event){
                    this.$emit('update', this.getContent(event));
                }
            }
        });

        var ThItemManualAndMod = Vue.component('ThItemManualAndMod', {
            template : `         
                <th v-cloak
                 @mouseover="showMenuItems = true"
                 @mouseout="showMenuItems = false"
                ><!--v-on:click="deleteItem(item.id)"-->
                <flex-row v-bind:style="editZoneStyles" align-v="center">
                    <editable :content="item.itemname"  @update="saveNameChanges($event)"></editable>
                    <editable
                     :sufix="'%'"
                     :content="item.aggregationcoef | round(2)" 
                     @update="saveAggregationCoefChanges($event)" 
                     v-if="parentCategory.aggregation == weightedAggregation"
                     ></editable>
                    <ItemMiniMenuEdit v-show="showMenuItems" v-bind:itemId="item.id"></ItemMiniMenuEdit>
                </flex-row>
                </th>
   `,       data: function () {
                return {
                    showMenuItems: false,
                    editZoneStyles: {
                        display: 'grid',
                        gridTemplateColumns: 'repeat(3, max-content)',
                        gridColumnGap: '5px'
                    },
                }
            },
            props: ['itemId'],
            methods: {
                ...Vuex.mapActions({
                    deleteItem: g_store.actions.DELETE_ITEM
                }),
                saveNameChanges: function (itemName) {
                    if (itemName !== this.item.itemname) {
                        this.$store.dispatch(
                            g_store.actions.UPDATE_ITEM,
                            {...this.item, itemname: itemName}
                        );
                    }
                },
                saveAggregationCoefChanges: function(itemAggregationCoef) {
                    if (itemAggregationCoef !== this.item.aggregationcoef) {
                        this.$store.dispatch(
                            g_store.actions.UPDATE_ITEM,
                            {...this.item, aggregationcoef: itemAggregationCoef}
                        );
                    }
                }
            },

            computed: {
                ...Vuex.mapState([
                    'items'
                ]),
                ...Vuex.mapGetters(['categoryById']),
                item: function () {
                    return this.items[this.itemId];
                },
                parentCategory: function () {
                    return this.categoryById(this.item.categoryid)
                },
                weightedAggregation: function (){
                    return g_enums.aggregations.PROMEDIO;
                }
            }
        });

        var ThItemCategory = Vue.component('ThItemCategory', {
            template : `         
                <th v-bind:colspan="colspan" >
                            {{itemName}}
                </th>
   `,
            props: ['itemId', 'colspan'],
            computed: {
                ...Vuex.mapState([
                    'items'
                ]),
                ...Vuex.mapGetters([
                    'categoryById'
                ]),
                item: function () {
                    return this.items[this.itemId];
                },
                categoryParent: function() {
                    return this.categoryById(this.item.iteminstance);
                },
                itemName: function() {
                    return 'TOTAL ' + this.categoryParent.fullname ;
                }
            },
        });

        var ThStudent = Vue.component('ThStudent',
            {
                // language=HTML
                template: `
                <th scope="row">
                    {{studentFullName}}
                </th>
                `,
                props: ['studentId'],
                computed: {
                    ...Vuex.mapGetters([
                        'studentById'

                    ]),
                    ...Vuex.mapGetters({
                        students: 'studentSet'
                    }),
                    student: function() {
                        return this.studentById(this.studentId);
                    },
                    studentFullName: function() {
                        return this.student.lastname + ' ' + this.student.firstname;
                    }
                }
            });
        var TdGrade = Vue.component('TdGrade',
            {
               template: `
                <td  > 
                <input v-bind:disabled="inputDisabled" type="number" v-bind:tabindex="tabIndex" step="0.1"  v-bind:max="grade.rawgrademax" v-bind:min="grade.rawgrademin" v-model.lazy="finalGrade">
                </td>
                `,
                props: ['gradeId', 'studentIndex', 'itemIndex'],
                methods: {
                    ...Vuex.mapActions({
                        updateGrade: g_store.actions.UPDATE_GRADE
                })
                },
                computed: {
                    ...Vuex.mapState([
                        'grades',
                        'items',
                        'course'
                    ]),
                    ...Vuex.mapGetters([
                        'studentsCount'
                    ]),
                    tabIndex: function() {
                      return (this.itemIndex + 1) * this.studentsCount +  this.studentIndex + 1;
                    },
                    inputDisabled: function () {
                        return this.item.itemtype==='category';
                    },
                    grade: function() {
                        return this.grades[this.gradeId];
                    },
                    item: function () {
                      return this.items[this.grade.itemid];
                    },
                    finalGrade: {
                        get() {
                           return this.grade.finalgrade;
                        },
                        set(value) {
                            this.grade.finalgrade = value;
                            this.updateGrade(this.grade, this.course.id);
                        }
                    }
                }

            });
        var TrGrades = Vue.component('TrGrades',
            {
                template: `
                <tr 
                v-bind:class="{is_ases: student.is_ases}" 
                v-bind:title="student.is_ases? 'El estudiante pertenece al programa ASES' : ''"
                >
                    <ThStudent v-bind:studentId="student.id"></ThStudent>
                    <td >{{student.username}}</td>
                    <TdGrade 
                    v-for="(gradeId, index) in studentGradeIdsOrdered" 
                    :key="gradeId"
                    v-bind:studentIndex="studentIndex"
                    v-bind:itemIndex="index"
                    v-bind:gradeId="gradeId"
                    >
                    </TdGrade>
                   
                </tr>
                `,
                props: ['studentId', 'studentIndex'],
                computed: {
                    ...Vuex.mapState([
                       'students',
                        'grades'
                    ]),
                    ...Vuex.mapGetters([
                        'itemOrderIds'
                    ]),
                    student: function() {
                      return this.students[this.studentId];
                    },
                    /**
                     * Return the student grades ordered in the same order
                     * than `itemOrderIds`
                     * see g_store.sate.getters.itemOrderIds
                     */
                    studentGradeIdsOrdered: function() {
                        return g_utils.
                        orderGradeIdsInItemSetOrder(
                            this.student.gradeIds,
                            this.grades,
                            this.itemOrderIds
                            );
                    }
                }
            }
            );
        // language=HTML
        var Grader = Vue.component(g_c_main.name, g_c_main.component);


    var Home = Vue.component('home', {
        template: '<div>hola</div>',
        computed: {
            username() {
                // We will see what `params` is shortly
                return this.$route.params.username
            }
        },
        methods: {
            goBack () {
                window.history.length > 1
                    ? this.$router.go(-1)
                    : this.$router.push('/')
            }
        }
    });
    /** Filter registry */
    Vue.filter (g_filters.round.name, g_filters.round.func);

    var router = new VueRouter({
        routes: g_router.routes
    });
     var app = new Vue({
         store: store,
         router: router,
         components: {
             Grader,
             EditCategoryForm,
             Home,
             ThCategory,
             TrItems,
             ThItemManualAndMod
         }
     });


    return {
        init: function() {
            app.$mount('#app');
            $(document).ready(function() {

            });
        }
    };
}
);